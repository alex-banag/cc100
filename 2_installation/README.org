#+TITLE:Installation
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++
#+STARTUP:overview
#+OPTIONS: toc:1
#+OPTIONS:hideblocks
* What are you going to learn?

  * Why we don't just get coding
  * Installing Emacs under Windows
  * Installing Emacs under MacOS
  * Installing a C compiler under Windows
  * Installing a C compiler under MacOS
  * Setting the correct $PATH
  * Testing our installation with "hello world"
  * Summary of concepts/code
  * What's next

* Why we don't just get coding

  There are two reasons - one is philosophical, the other is
  technical.

  #+begin_quote
  "Understanding underlying technologies helps you develop a sense of
  what can go wrong. Knowing just high-level tools makes it easy to ask
  the wrong questions. It's worth learning to use a hammer before
  graduating to a nail gun. Learning underlying systems and tools gives
  you the power to build new tools, which is important because there
  will always be a need for tool builders, even if tool users are more
  common. Learning about computers so that the behavior of programs
  isn't a mystery enables you to craft better code." (Steinhart, 2019)
  #+end_quote

  The other reason has to do with C itself:

  | TASK                                                    | SOFTWARE |
  |---------------------------------------------------------+----------|
  | C source code needs to be written and edited            | editor   |
  | C source code needs to be compiled, linked and debugged | compiler |
  | C object code needs to be run                           | shell    |

  #+attr_html: :width 600px
  [[./img/workflow.png]]

  /Image: C programming workflow / BPMN model/

  There are different routes to getting C running on your computer,
  depending on your operating system (Linux, MacOS or Windows). Here
  is a selection[fn:4]:

  1. ~Code::Blocks~ - this is the simplest solution. ~Code::Blocks~ is
     an IDE, an environment to develop, test and run C, C++ and
     FORTRAN[fn:3] programs. An alternative is ~CodeLite~. Both are
     free and open source.
  2. ~Cygwin~ allows you to use your Windows computer like a Linux
     distribution. You can easily install many different utility
     programs and different compilers. C programs have to be edited,
     run and tested in command line mode. You can now also run Emacs
     if you like. See FAQ.
  3. ~GNU Emacs~ and the ~gcc~ compiler (~MinGW~ for Windows, or
     ~XCode~ with ~gcc~ for MacOS). This is what I'll be doing for the
     duration of the course. I'll show you how to do it, and then 
  4. ~GNU Linux~ and ~GNU Emacs~ together - install Ubuntu Linux and
     Emacs. This gives you the greatest flexibility but it also takes
     the longest to install. Once you master this third route, you'll
     have learnt a lot of useful, transferable skills.

* Emacs for C programming

* Summary

  * To program in C, we need a computer, a compiler, and an editor.
  * You can use an IDE like ~Code::Blocks~, a Linux-like environment
    like ~Cygwin~ , or ~Linux~ directly, or an editor like Emacs
  * You'll have to download the compiler for your operating system:
    ~MinGW~ (that's ~GNU gcc~) for Windows, ~XCode~ (that's ~Clang~)
    for MacOS. Linux comes with ~gcc~ already.
    
* TODO Concepts

  | CONCEPT       | EXPLANATION                                    |
  |---------------+------------------------------------------------|
  | Binary file   | File built from source for a specific platform |
  | Coding        | Programming or scripting[fn:1]                 |
  | Native app    | Designed for a specific computer architecture  |
  | Cygwin        | Linux tools for Windows                        |
  | x86_64        | Built for a x86 (CPU) 64-bit computer          |
  | Emacs         | Extensible text editor                         |
  | GNU/Linux     | Open Source operating system                   |
  | IDE           | Integrated Development Environment             |
  | Code::Blocks  | C/C++ IDE                                      |
  | gcc           | GNU compiler bundle                            |
  | Clang         | C/C++ compiler                                 |
  | Google trends | Search trend dashboard                         |
  | Launcher      | Program that starts another program            |
  | Startup       | Set of programs that are started at boot time  |
  | Booting       | Starting a computer                            |

* What's next
* References

  Biggs/Donovan (November 9, 2020). Modern IDEs are magic. Why are so
  many coders still using Vim and Emacs? [Blog]. URL:
  [[https://stackoverflow.blog/2020/11/09/modern-ide-vs-vim-emacs/][stackoverflow.org]].

  Cygwin

  Galov (August 9, 2021). 111+ Linux Statistics and Facts - Linux
  Rocks! [blog]. [[https://hostingtribunal.com/blog/linux-statistics/#gref][URL: hostingtribunal.com]].

  Kenlon (March 10, 2020). Getting started with Emacs [blog]. [[https://opensource.com/article/20/3/getting-started-emacs][URL:
  opensource.com.]]

  MacDonald (September 7, 2020). How to install Cygwin packages, 1/2
  (Using the installer via the GUI) [video]. [[https://youtu.be/VyIY8cjn9xY][URL:
  youtu.be/VyIY8cjn9xY]].
  
  Steinhart (2019). The Secret Life of Programs. NoStarch Press. [[https://nostarch.com/foundationsofcomp][URL:
  nostarch.com.]]

  Wilson (November 28, 2021). M-x Forever: Why Emacs will outlast text
  editor trends. Emacs conference 2021 [video]. [[https://youtu.be/9ahR5K_wkNQ][URL:
  youtu.be/9ahR5K_wkNQ]].

  Wilson (March 8, 2021). The Absolute Beginner's Guide to Emacs
  [video]. [[https://youtu.be/48JlgiBpw_I][URL: youtu.be/48JlgiBpw_I]].

* Footnotes

[fn:7]In fact, the site will of course store data related to your
network location and access manner - your operating system, and many
details that could, in principle, be used to trace the download back
to you.

[fn:6]A "binary" program is a file that will run on your computer
without any extra effort. This means that the program is suited to the
specifics of the computer. The binary itself is compiled from
so-called "source code", the original, human-readable format of the
code. The binary, on the other hand, can only be read by a machine.
 
[fn:3][[https://en.wikipedia.org/wiki/Fortran][FORTRAN]] is even older than C. It is optimized for scientific and
numerical computations. Many other languages that are "good at math",
like R, use FORTRAN routines. FORTRAN was also one my first
programming language.

[fn:2]As a Windows user you probably know what that means, but just in
case: cygwin is now added to the programs that are started whenever
the computer boots, and you can find the program launcher on your
desktop.

[fn:1]Some developers take exception to the terms, but we use them
interchangeably in this course. Script languages (e.g. Perl, Python,
JavaScript,R etc.) do not need to be compiled - the computer can
translate the source code (that you write) straight into executable
(or object) code that runs and generates a result.
