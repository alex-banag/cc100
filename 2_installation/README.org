#+TITLE:Installation
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++
#+STARTUP:overview
#+OPTIONS: toc:1
#+OPTIONS:hideblocks
* What are you going to learn?

  * Why we don't just get coding
  * Emacs for C Programming
  * Installing and using Emacs
  * Installing Emacs under MacOS
  * Installing a C compiler under Windows
  * Installing a C compiler under MacOS
  * Setting the correct $PATH
  * Testing our installation with "hello world"
  * Summary of concepts/code
  * What's next

* Why we don't just get coding

  There are two reasons - one is philosophical, the other is
  technical.

  #+begin_quote
  "Understanding underlying technologies helps you develop a sense of
  what can go wrong. Knowing just high-level tools makes it easy to ask
  the wrong questions. It's worth learning to use a hammer before
  graduating to a nail gun. Learning underlying systems and tools gives
  you the power to build new tools, which is important because there
  will always be a need for tool builders, even if tool users are more
  common. Learning about computers so that the behavior of programs
  isn't a mystery enables you to craft better code." (Steinhart, 2019)
  #+end_quote

  The other reason has to do with C itself:

  | TASK                                                    | SOFTWARE |
  |---------------------------------------------------------+----------|
  | C source code needs to be written and edited            | editor   |
  | C source code needs to be compiled, linked and debugged | compiler |
  | C object code needs to be run                           | shell    |

  #+attr_html: :width 600px
  [[./img/workflow.png]]

  /Image: C programming workflow / BPMN model/

  There are different routes to getting C running on your computer,
  depending on your operating system (Linux, MacOS or Windows)[fn:1].

  The problem with IDEs is that they're clunky. 
  
* Emacs for C programming

** What is Emacs ?

   #+attr_html: :width 500px
   [[./img/emacs.png]]
   /Image: GNU Emacs logo. Source: 
   
   Emacs is an extensible editor written in C, with Emacs Lisp, a Lisp
   dialect, as an extenstion language. It was first released
   in 1985. Its extensibility and a large, active, passionate
   community of developers and users made sure that it still evolves. 

** How do you use Emacs?

   I've written an article about this for the introductory data
   science course ([[https://github.com/birkenkrahe/org/blob/master/FAQ.md#which-editor-and-ide-do-you-use][FAQ]]). I use Emacs for most of my computing needs,
   not just as an editor, but also for writing, organizing, and
   planning.

   Here are a few reports from first-time Emacs users that you might
   find interesting:
   * [[https://opensource.com/article/20/3/getting-started-emacs][Getting started with Emacs]] - blog (Kenlon, 2020).
   * [[https://youtu.be/Y8koAgkBEnM][Switching to GNU Emacs]] - video (DistroTube, 2019).

** How will we use Emacs?

   We'll use it as an editor to write source code, as a notebook to
   write literate programs, and as a shell to build and run code.

      

** How do you install Emacs?
*** Windows
*** MacOS
*** Linux

* Getting a compiler

** Windows

** MacOS

** Linux

* Summary

  * To program in C, we need a computer, a compiler, and an editor.
  * You can use an IDE like ~Code::Blocks~, a Linux-like environment
    like ~Cygwin~ , or ~Linux~ directly, or an editor like Emacs
  * You'll have to download the compiler for your operating system:
    ~MinGW~ (that's ~GNU gcc~) for Windows, ~XCode~ (that's ~Clang~)
    for MacOS. Linux comes with ~gcc~ already.

* TODO Jargon

  | CONCEPT          | EXPLANATION                                      |
  |------------------+--------------------------------------------------|
  | Source code      | Human-readable program                           |
  | Compiling        | Translating source                               |
  | Linking          | Linking compiled program to libraries            |
  | Library          | Bundle of reusable macros or functions           |
  | Object code      | Code ready for execution by a machine            |
  | Execution        | Running object code on a machine                 |
  | Interpreter      | Machine that interprets and executes source code |
  | Script           | Source code for an interpreter                   |
  | Emacs            | Extensible text editor (via Emacs Lisp)          |
  | GNU              | "GNU's not UNIX"                                 |
  | GNU/Linux        | Free, open source operating system               |
  | Richard Stallman | Creator of the GNU project and Emacs             |

* What's next
* References

  Biggs/Donovan (November 9, 2020). Modern IDEs are magic. Why are so
  many coders still using Vim and Emacs? [Blog]. URL:
  [[https://stackoverflow.blog/2020/11/09/modern-ide-vs-vim-emacs/][stackoverflow.org]].

  DistroTube (October 4, 2019). Switching to GNU Emacs [video]. [[https://youtu.be/Y8koAgkBEnM][URL:
  youtu.be/Y8koAgkBEnM]].
  
  Galov (August 9, 2021). 111+ Linux Statistics and Facts - Linux
  Rocks! [blog]. [[https://hostingtribunal.com/blog/linux-statistics/#gref][URL: hostingtribunal.com]].

  Kenlon (March 10, 2020). Getting started with Emacs [blog]. [[https://opensource.com/article/20/3/getting-started-emacs][URL:
  opensource.com.]]

  Steinhart (2019). The Secret Life of Programs. NoStarch Press. [[https://nostarch.com/foundationsofcomp][URL:
  nostarch.com.]]

  Wilson (November 28, 2021). M-x Forever: Why Emacs will outlast text
  editor trends. Emacs conference 2021 [video]. [[https://youtu.be/9ahR5K_wkNQ][URL:
  youtu.be/9ahR5K_wkNQ]].

  Wilson (March 8, 2021). The Absolute Beginner's Guide to Emacs
  [video]. [[https://youtu.be/48JlgiBpw_I][URL: youtu.be/48JlgiBpw_I]].

* Footnotes

[fn:1]Code::Blocks, CodeLite, Netbeans, Microsoft Visual Studio (VS),
are all free IDEs for C/C++, with VS being the most popular one right
now.
