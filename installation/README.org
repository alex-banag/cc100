#+TITLE:
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++
#+STARTUP:overview
#+OPTIONS: toc:1
#+OPTIONS:hideblocks
* What will you learn?

  #+begin_quote
  "It's nostalgic to edit, build and run C programs in text mode, but
  it works well and is quite efficient." --[[gookin][Dan Gookin]]
  #+end_quote

  * Install Ubuntu Linux under Windows 10
  * Install a compiler
  * Get help under Linux

  Source: [[gookin][Gookin, chapter 1]]

* Glossary

  | [[https://en.wikipedia.org/wiki/Compiler][Compiler]] | Software to turn source code into executable code                    |
  | Shell    | Software to control your computer from the command line (using text) |
  | Editor   | Software to create and edit source code (as a text document)         |
  | Ubuntu   | Popular Linux distribution or "distro"                               |

* Install Ubuntu under Windows 10

  The easiest way to get hold of C. [[https://github.com/birkenkrahe/org/blob/master/FAQ.md#how-can-i-install-linux-under-windows-10][See this FAQ]] on how to download
  and run Ubuntu for free as an app from the Microsoft store under
  Windows.

  | Time | ca. 15 min. |

* Install a compiler

  The GNU C compiler, ~gcc~, already comes pre-installed with
  Linux. You can check its version with the shell command ~gcc
  --version~. The ~--version~ is a so-called Unix flag or command line
  option. To see all command line options, you can use the ~--help~
  flag.

  Another popular C compiler (with more options) is ~clang~. Install
  it in Ubuntu with the command ~sudo apt install clang~. Let's look
  at this command:

  | ~sudo~    | any following command is executed with administrator rights |
  | ~apt~     | the software package manager program for Ubuntu             |
  | ~install~ | utility program to install whatever follows                 |
  | ~clang~   | a C programming language compiler                           |

* Get helpful information

  Help information on a Unix system is stored in so-called manual or
  ~man~ pages. Their format is standardized. There are man pages for
  every one of the commands introduced so far. Try some of these:

  | ~man gcc~     |
  | ~man sudo~    |
  | ~man apt~     |
  | ~man install~ |
  | ~man clang~   |
  | ~man man~     |

  ~man~ itself is also a utility, and has a ~man~ page, of
  course. When you open it, you see that ~man~ is an ~interface~
  program.

* UML diagrams for ~man~


  [[./img/man.png]]

  UML (Unified Modeling Language) is useful to create diagrams of
  aspects of a system - in this case the diagram only says that ~man~
  is an interface. Another UML diagram for ~man~ shows its use from
  outside the system, as a so-called use case diagram:

  [[./img/man1.png]]

  The diagram says that there is a way for a ~User~ to ~Get help~ in
  the ~Linux operating system~.

* References

  <<king>> King (2008). C Programming - A Modern
  Approach. Norton. [[http://knking.com/books/c2/index.html][Online: knking.com]].

  <<kr>> Kernighan/Ritchie (1978). The C Programming
  Language. Prentice Hall. [[https://en.wikipedia.org/wiki/The_C_Programming_Language][Online: wikipedia.org]].

  <<lemonaki>> Lemonaki, Dionysia (November 4, 2021). C vs. C++ -
  What's The Difference [blog]. URL: [[https://www.freecodecamp.org/news/c-vs-cpp-whats-the-difference/][freecodecamp.org.]]

  <<gookin>> Gookin D (2021). Tiny C Projects. Manning.
