#+TITLE:C Basics
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++
#+STARTUP:overview
#+OPTIONS: toc:nil
#+OPTIONS:hideblocks
#+INFOJS_OPT: :view:info
* What are you going to learn?

  This script summarizes and adds to the treatment by King (2008),
  chapter 2, C Fundamentals - see also [[https://docs.google.com/presentation/d/14qvh00aVb_R09_hrQY0EDEK_JLAkgZ0S/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][slides (GDrive)]]

  * Program structure
  * Program: Printing a Pun
  * Compiler workflow
  * Shell execution
  * Syntax highlighting

    
  -----
* Program structure

  #+attr_html: :width 600px
  [[./img/structure.png]]

  (Image source: Collingbourne, 2017)

* Program: Printing a Pun

  * You can run the code block below ([[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-C.html][more on C code blocks]])
  * What happens here:
    - The standard input/output library is included
    - A function without arguments is defined
    - A string is printed out
    - If successful, the program returns ~0~

  #+begin_src C :exports both

    #include <stdio.h>

    int main(void)
    {
      printf("To C or not to C: that is the question.\n");
      return 0;
    }

  #+end_src

  #+RESULTS:
  : To C or not to C: that is the question.

  The function could have been written as ~int main(int argc, char **argv)~
  as well - indicating the possibility of passing two arguments to its
  body for further processing.

  The program could also have been written like this:

  #+begin_src C :exports both

    #include <stdio.h>

    main()
    {
      printf("hello world\n");
    }

  #+end_src

  Alas, in Org-mode, this program will not compile, though outside of
  Org-mode, it will (with a warning). Try it!

* Compiler workflow

  The machine cannot process ~pun.c~ without help. It must

  | Preprocess | The preprocessor acts on lines beginning with ~#~             |   |
  | Compile    | The compiler translates instructions into object code         |   |
  | Link       | The linker combines object code and functions like ~printf()~ |   |
  | Run        | The final ~*.exe~ program is a binary (machine) program       |   |
  | Debug      | The debugger controls rule violations along the way           |   |

* Shell execution

  * You can also save the code in a program ~pun.c~
  * Compile it on the Windows command line or in the Emacs shell:

    | COMMAND            | ACTION                                        |
    |--------------------+-----------------------------------------------|
    | C-x C-f pun.c      | Create C file ~pun.c~                         |
    |                    | Copy block or write code anew in ~pun.c~      |
    | C-x C-s            | Save ~pun.c~                                  |
    | M-x eshell         | start a command line shell in an Emacs buffer |
    | ~gcc -o pun pun.c~ | compile program and create executable         |
    | ~ls~               | list files - you should see ~pun.exe~         |
    | ~pun~              | execute program                               |

    * The shell is an Emacs Lisp simulation of a Linux shell (~bash~)
    * Windows ~PowerShell~ would also work (run with ~./pun[.exe]~)

* Syntax highlighting

  * Notice the slight syntax highlighting difference to ~repl.it~

    #+attr_html: :width 330px
    [[./img/replit.png]]

  * There is no highlighting standard - you should experiment with
    different themes[fn:1]
  * Display line numbers with ~display-line-numbers-mode~, and
    highlight lines with ~hl-line-mode~[fn:2]:

    #+attr_html: :width 600px
    [[./img/pun.png]]

* Comments

  Forgetting to terminate a comment may cause the compiler to ignore
  part of your program - but both syntax highlighting and auto-indent
  in the editor will tip you off:

  #+begin_src C :exports both :main yes :includes stdio.h

    printf("My "); /* forgot to close this comment ...
                      printf("cat ");
                      printf("has ");  /* so it ends here */
    printf("fleas");

  #+end_src

  #+RESULTS:
  : My fleas

  Let's fix this:

  #+begin_src C :exports both :main yes :includes stdio.h

    printf("My "); /* forgot to close this comment */
    printf("cat ");
    printf("has ");  /* so it ends here */
    printf("fleas");

  #+end_src

  #+RESULTS:
  : My cat has fleas

* Concept summary

  * C programs must be compiled and linked
  * Programs consist of directives, functions, and statements
  * C directives begin with a hash mark (~#~)
  * C statements end with a semicolon (~;~)
  * C functions begin and end with parentheses ~{~ and ~}~

* Code summary

  | CODE                          | EXPLANATION                         |
  |-------------------------------+-------------------------------------|
  | ~#include~                    | directive to include other programs |
  | ~stdio.h~                     | standard input/output header file   |
  | ~main(void)~                  | main function without argument      |
  | ~main(int argc, char **argv)~ | main function with two arguments    |
  | ~return~                      | statement (successful completion)   |
  | ~void~                        | empty argument - no value           |
  | ~printf~                      | printing function                   |
  | ~\n~                          | escape character (new-line)         |
  | ~/* ... */~  ~//...~          | comments                            |

* Jargon

  | CONCEPT      | EXPLANATION                                  |
  |--------------+----------------------------------------------|
  | Compiler     | translates source code to object code        |
  | Linker       | translates object code to machine code       |
  | Syntax       | language rules                               |
  | Debugger     | checks syntax                                |
  | Directive    | starts with ~#~, one line only, no delimiter |
  | Preprocessor | processes directives                         |
  | Statement    | command to be executed, e.g. ~return~        |
  | Delimiter    | ends a statement (in C: semicolon - ;)       |
  | Function     | a rule to compute something with arguments   |

* What's next

* References

  Collingbourne (2019). The Little Book of C (Rev. 1.2). Dark Neon.

  King (2008). C Programming - A Modern Approach. Norton. [[http://knking.com/books/c2/index.html][Online:
  knking.com]].

* Footnotes

[fn:1]You can find [[https://emacsthemes.com/][themes for GNU Emacs]] here, and install them
using ~M-x package-list-packages~.

[fn:2]If you always want to have line numbers and highlight the line
under the cursor, put these lines in your ~.emacs~ file: and restart
Emacs:
#+begin_src emacs-lisp
  ;; always display line numbers
  (global-display-line-numbers-mode)
  ;; enable global highlighting
  (global-hl-line-mode 1)
#+end_src
